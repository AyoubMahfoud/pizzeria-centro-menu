// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Admin user
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Categorie menu
model Category {
  id          String   @id @default(cuid())
  name        String
  nameEn      String?
  description String?
  order       Int      @default(0)
  dishes      Dish[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Ingredienti
model Ingredient {
  id          String            @id @default(cuid())
  name        String            @unique
  available   Boolean           @default(true)
  dishes      DishIngredient[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

// Piatti/Pizze
model Dish {
  id                String            @id @default(cuid())
  name              String
  nameEn            String?
  description       String?
  descriptionEn     String?
  price             Float
  categoryId        String
  category          Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  ingredients       DishIngredient[]
  allergens         String?           // Salvato come stringa JSON es: ["c", "f"]
  available         Boolean           @default(true)
  image             String?
  order             Int               @default(0)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([categoryId])
}

// Tabella di relazione molti-a-molti
model DishIngredient {
  id           String     @id @default(cuid())
  dishId       String
  ingredientId String
  dish         Dish       @relation(fields: [dishId], references: [id], onDelete: Cascade)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@unique([dishId, ingredientId])
  @@index([dishId])
  @@index([ingredientId])
}
